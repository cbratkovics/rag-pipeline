apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-api
  labels:
    app: rag-api
    component: backend
    tier: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rag-api
  template:
    metadata:
      labels:
        app: rag-api
        component: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: rag-api
        image: rag-pipeline:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: APP_ENV
          value: "production"
        - name: API_HOST
          value: "0.0.0.0"
        - name: API_PORT
          value: "8000"
        - name: LLM_PROVIDER
          value: "stub"
        - name: CHROMA_PERSIST_DIR
          value: "/app/.chroma"
        - name: EMBEDDING_MODEL
          value: "all-MiniLM-L6-v2"
        - name: PROMETHEUS_ENABLED
          value: "true"
        - name: PROMETHEUS_MULTIPROC_DIR
          value: "/tmp/prometheus_multiproc"
        - name: PYTHONPATH
          value: "/app"
        envFrom:
        - configMapRef:
            name: rag-config
        - secretRef:
            name: rag-secrets
            optional: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: chroma-storage
          mountPath: /app/.chroma
        - name: mlflow-storage
          mountPath: /mlflow
      volumes:
      - name: chroma-storage
        persistentVolumeClaim:
          claimName: chroma-pvc
      - name: mlflow-storage
        persistentVolumeClaim:
          claimName: mlflow-pvc
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rag-api
              topologyKey: kubernetes.io/hostname