[tool.poetry]
name = "rag-pipeline-ragas"
version = "0.1.0"
description = "Production-grade RAG pipeline with A/B testing and continuous learning"
authors = ["AI Engineer <ai@example.com>"]
readme = "README.md"
packages = [{include = "src"}, {include = "api"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
httpx = "^0.25.2"
typer = "^0.9.0"
tenacity = "^8.2.3"
requests = "^2.31.0"

# Core dependencies with more flexible versions
numpy = "^1.24.0"
pandas = "^2.0.0"
scikit-learn = "^1.3.0"
protobuf = ">=3.20.0,<4.0.0"  # Allow range but stay below 4.0 for ChromaDB
redis = "^5.0.0"  # Add missing redis dependency
structlog = "^24.4.0"  # Add structlog for structured logging
nltk = "^3.9.1"  # Version 3.8.0 doesn't exist, use 3.9.1

# Vector search and embeddings
chromadb = "^0.4.0"
rank-bm25 = "^0.2.2"
sentence-transformers = "^2.2.2"

# LLM Support
openai = "^1.0.0"

# Evaluation
ragas = "^0.1.0"
datasets = "^2.14.0"

# Monitoring and observability
prometheus-client = "^0.19.0"
mlflow = "^2.9.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
torch = "<2.3.0"
qdrant-client = "<1.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "7.4.4"
pytest-cov = "4.1.0"
pytest-asyncio = "0.21.2"
pytest-mock = "3.12.0"
pytest-env = "1.1.3"
responses = "^0.24.0"
faker = "^20.0.0"
ruff = "^0.1.6"
mypy = "^1.7.0"
bandit = "^1.7.5"
locust = "^2.19.0"
types-requests = "^2.31.0"
ipython = "^8.17.0"
pre-commit = "^3.5.0"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
rag-api = "api.main:main"
rag-ingest = "src.rag.ingest:main"
rag-eval = "src.eval.ragas_runner:main"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM", "RUF"]
ignore = ["E501", "B008", "C901", "W191"]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
# All files that need protobuf environment variable before imports
"scripts/simple_ingest.py" = ["E402"]
"src/rag/ingest.py" = ["E402"]
"src/rag/retriever.py" = ["E402"]
"tests/test_pipeline.py" = ["E402"]
"tests/test_rrf.py" = ["E402"]
"tests/test_api_basic.py" = ["E402"]
"tests/conftest.py" = ["E402"]
"tests/test_embeddings.py" = ["E402"]
"tests/test_vector_store.py" = ["E402"]
"tests/test_generator.py" = ["E402"]
"tests/test_config.py" = ["E402"]
"tests/test_cache.py" = ["E402"]
"tests/test_monitoring.py" = ["E402"]
"tests/test_ab_testing.py" = ["E402"]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
addopts = "-v --tb=short --strict-markers"
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow",
    "asyncio: marks tests as asyncio tests",
]

[tool.coverage.run]
source = ["src", "api"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
]
