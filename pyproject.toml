[tool.poetry]
name = "rag-pipeline-ragas"
version = "0.1.0"
description = "Production-grade RAG pipeline with A/B testing and continuous learning"
authors = ["AI Engineer"]
readme = "README.md"
python = "^3.11"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
langchain = "^0.1.0"
langchain-community = "^0.0.10"
sentence-transformers = "^2.2.2"
qdrant-client = "^1.7.0"
chromadb = "^0.4.18"
redis = "^5.0.1"
asyncpg = "^0.29.0"
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
numpy = "^1.24.3"
pandas = "^2.1.3"
scikit-learn = "^1.3.2"
transformers = "^4.36.0"
torch = "^2.1.0"
ragas = "^0.1.0"
mlflow = "^2.9.0"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
structlog = "^23.2.0"
python-dotenv = "^1.0.0"
httpx = "^0.25.2"
tenacity = "^8.2.3"
cachetools = "^5.3.2"
python-multipart = "^0.0.6"
arxiv = "^2.0.0"
wikipedia-api = "^0.6.0"
beautifulsoup4 = "^4.12.2"
lxml = "^4.9.3"
rank-bm25 = "^0.2.2"
nltk = "^3.8.1"
spacy = "^3.7.2"
pytest-asyncio = "^0.21.1"
aiofiles = "^23.2.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.12.0"
black = "^23.11.0"
ruff = "^0.1.6"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
locust = "^2.19.0"
bandit = "^1.7.5"
ipykernel = "^6.27.0"
jupyter = "^1.0.0"
types-redis = "^4.6.0"
types-cachetools = "^5.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM", "RUF"]
ignore = ["E501", "B008", "C901", "W191"]
fixable = ["ALL"]
target-version = "py311"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]